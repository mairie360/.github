name: Check Late Issues in GitHub Project

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 * * * *'  # Runs every hour, adjust as needed

env:
  GITHUB_TOKEN_OVERRIDE: ${{ secrets.GRAPH_QL_ACCESS_TOKEN }}
  PROJECT_GITHUB_ID: ${{ vars.PROJECT_GITHUB_ID }}

jobs:
  check-project-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check Late ToDo Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GITHUB_TOKEN_OVERRIDE }}
          script: |
            const LATE_FIELD_NAME = "En retard";
            const LATE_FIELD_VALUE_YES = "Oui";

            async function getProjectFields(projectId) {
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const result = await github.graphql(query, { projectId });
              return result.node.fields.nodes;
            }

            async function setLateFieldToYes(projectId, itemId, fieldId, optionId) {
              const mutation = `
                mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                  updateProjectV2ItemFieldValue(input: $input) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              const variables = {
                input: {
                  projectId,
                  itemId,
                  fieldId,
                  value: { singleSelectOptionId: optionId }
                }
              };
              await github.graphql(mutation, variables);
              console.log(`✅ Updated item ${itemId} -> field ${fieldId} to option ${optionId}`);
            }

            const projectId = process.env.PROJECT_GITHUB_ID;

            const priorityLimitMap = {
              "P0": 3,
              "P1": 5,
              "P2": 7,
              "P3": 10,
            };

            function getIssueAgeInDays(createdAt) {
              const createdDate = new Date(createdAt);
              const now = new Date();
              const diffMs = now - createdDate;
              return Math.floor(diffMs / (1000 * 60 * 60 * 24));
            }

            async function getIssuesWithFields(projectId) {
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 50) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              title
                              number
                              state
                              createdAt
                            }
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const result = await github.graphql(query, { projectId });
              const items = result.node.items.nodes;
              return items.map(item => {
                const issue = item.content;
                if (!issue) return null;

                let priority = "N/A";
                let status = "N/A";

                for (const field of item.fieldValues.nodes) {
                  if (field?.field?.name === "Priority") priority = field.name;
                  else if (field?.field?.name === "Status") status = field.name;
                }

                return {
                  id: issue.id,
                  itemId: item.id,
                  number: issue.number,
                  title: issue.title,
                  state: issue.state,
                  createdAt: issue.createdAt,
                  priority,
                  status
                };
              }).filter(issue =>
                issue !== null && issue.status && issue.status.toLowerCase() === "todo"
              );
            }

            async function main() {
              if (!projectId) {
                console.log("❌ Missing PROJECT_GITHUB_ID environment variable.");
                return;
              }

              console.log("🔍 Fetching project fields...");
              const fields = await getProjectFields(projectId);

              const lateField = fields.find(f => f.name === LATE_FIELD_NAME);
              if (!lateField) {
                console.log(`❌ Field "${LATE_FIELD_NAME}" not found in project`);
                return;
              }
              if (!lateField.options) {
                console.log(`❌ Field "${LATE_FIELD_NAME}" does not have Single Select options`);
                return;
              }

              const yesOption = lateField.options.find(opt => opt.name === LATE_FIELD_VALUE_YES);
              if (!yesOption) {
                console.log(`❌ Option "${LATE_FIELD_VALUE_YES}" not found in "${LATE_FIELD_NAME}"`);
                return;
              }

              console.log("📋 Fetching project issues...");
              const issues = await getIssuesWithFields(projectId);

              for (const issue of issues) {
                console.log(`#${issue.number} - ${issue.title} (${issue.state})`);
                console.log(`   → Priority: ${issue.priority}, Status: ${issue.status}`);

                const priorityLimit = priorityLimitMap[issue.priority];
                if (!priorityLimit) {
                  console.log(`   ⚠ Unknown priority "${issue.priority}", skipping.`);
                  continue;
                }

                const ageInDays = getIssueAgeInDays(issue.createdAt);
                console.log(`   → Age: ${ageInDays} days (limit: ${priorityLimit})`);

                if (ageInDays > priorityLimit) {
                  console.log(`   🚨 Issue is late! Updating field...`);
                  await setLateFieldToYes(projectId, issue.itemId, lateField.id, yesOption.id);
                } else {
                  console.log(`   ✅ Issue is on time.`);
                }
              }
            }

            await main();
        env:
          PROJECT_GITHUB_ID: ${{ env.PROJECT_GITHUB_ID }}

  get-org-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch all repos of the org
        id: fetch_repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GITHUB_TOKEN_OVERRIDE }}
          script: |
            async function fetchAllRepos(org) {
              let repos = [];
              let hasNextPage = true;
              let after = null;
              while (hasNextPage) {
                const query = `
                  query($org: String!, $after: String) {
                    organization(login: $org) {
                      repositories(first: 50, after: $after) {
                        nodes {
                          name
                        }
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                      }
                    }
                  }
                `;
                const variables = { org, after };
                const result = await github.graphql(query, variables);
                repos.push(...result.organization.repositories.nodes.map(r => r.name));
                hasNextPage = result.organization.repositories.pageInfo.hasNextPage;
                after = result.organization.repositories.pageInfo.endCursor;
              }
              return repos;
            }

            const org = "mairie360";
            const repos = await fetchAllRepos(org);
            return repos;

      - name: Fetch PRs and linked issues for each repo
        uses: actions/github-script@v7
        env:
          FETCH_REPOS_RESULT: ${{ steps.fetch_repos.outputs.result }}
          PROJECT_GITHUB_ID: ${{ env.PROJECT_GITHUB_ID }}
        with:
          github-token: ${{ env.GITHUB_TOKEN_OVERRIDE }}
          script: |
            const repos = JSON.parse(process.env.FETCH_REPOS_RESULT);
            const allPRTitles = [];

            async function fetchPullRequests(owner, repo) {
              const query = `
                query($owner: String!, $repo: String!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequests(first: 10, orderBy: {field: CREATED_AT, direction: DESC}) {
                      nodes {
                        number
                        title
                        createdAt
                        state
                        url
                        labels(first: 5) {
                          nodes {
                            name
                          }
                        }
                        timelineItems(itemTypes: [CONNECTED_EVENT], first: 5) {
                          nodes {
                            ... on ConnectedEvent {
                              id
                              source {
                                __typename
                                ... on Issue {
                                  number
                                  title
                                  url
                                  state
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const variables = { owner, repo };
              const result = await github.graphql(query, variables);
              // filtre pour ne garder que les PRs ouvertes
              return result.repository.pullRequests.nodes.filter(pr => pr.state === "OPEN");
            }

            async function findAndPrintIssueInProject(prTitle, createdAt) {
              if (!process.env.PROJECT_GITHUB_ID) {
                console.log("❌ Missing PROJECT_GITHUB_ID environment variable.");
                return;
              }

              const projectId = process.env.PROJECT_GITHUB_ID;

              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 50) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              title
                              state
                              createdAt
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const result = await github.graphql(query, { projectId });
              const items = result.node.items.nodes;

              const found = items.find(item =>
                item.content && item.content.title === prTitle
              );

              if (found) {
                console.log(`🎯 Found issue in project for PR "${prTitle}":`);
                console.log(`   - Issue #${found.content.number}`);
                console.log(`   - State: ${found.content.state}`);
                console.log(`   - Created at: ${found.content.createdAt}`);

                // Vérifie si l'issue est ouverte depuis plus d'une semaine
                const issueCreatedDate = new Date(found.content.createdAt);
                const now = new Date();
                const diffDays = Math.floor((now - issueCreatedDate) / (1000 * 60 * 60 * 24));

                if (diffDays > 7) {
                  console.log(`⚠️ This issue has been open for more than ${diffDays} days.`);

                  // Appel de la fonction pour mettre Review urgente à Oui
                  await setReviewUrgenteToYes(found.id);
                }
              } else {
                console.log(`🚫 No issue in project matches PR "${prTitle}".`);
              }
            }

            async function setReviewUrgenteToYes(itemId) {
              if (!process.env.REVIEW_URGENTE_FIELD_ID) {
                console.log("❌ Missing REVIEW_URGENTE_FIELD_ID environment variable.");
                return;
              }

              const fieldId = process.env.REVIEW_URGENTE_FIELD_ID;

              const mutation = `
                mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                  updateProjectV2ItemFieldValue(input: $input) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              const variables = {
                input: {
                  projectId: process.env.PROJECT_GITHUB_ID,
                  itemId: itemId,
                  fieldId: fieldId,
                  value: {
                    singleSelectOptionId: "Oui" // à remplacer par l'ID de l’option « Oui »
                  }
                }
              };

              try {
                const result = await github.graphql(mutation, variables);
                console.log(`✅ Review urgente set to "Oui" for item ${itemId}`);
              } catch (error) {
                console.error(`🚨 Failed to set Review urgente: ${error}`);
              }
            }

            const owner = "${{ github.repository_owner }}";

            for (const repo of repos) {
              console.log(`\nFetching PRs for repo: ${repo}`);
              const pullRequests = await fetchPullRequests(owner, repo);

              pullRequests.forEach(async pr => {
                console.log(`#${pr.number} - ${pr.title} (created at ${pr.createdAt})`);
                allPRTitles.push(pr.title);

                await findAndPrintIssueInProject(pr.title, pr.createdAt);
              });
            }
