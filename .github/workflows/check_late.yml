name: Check Late Issues in GitHub Project

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 * * * *'  # Runs every hour, adjust as needed

jobs:
  check-project-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check Late ToDo Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GRAPH_QL_ACCESS_TOKEN }}
          script: |
            const LATE_FIELD_NAME = "En retard";
            const LATE_FIELD_VALUE_YES = "Oui";

            async function getProjectFields(projectId) {
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const result = await github.graphql(query, { projectId });
              return result.node.fields.nodes;
            }

            async function setLateFieldToYes(projectId, itemId, fieldId, optionId) {
              const mutation = `
                mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                  updateProjectV2ItemFieldValue(input: $input) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              const variables = {
                input: {
                  projectId,
                  itemId,
                  fieldId,
                  value: { singleSelectOptionId: optionId }
                }
              };
              await github.graphql(mutation, variables);
              console.log(`✅ Updated item ${itemId} -> field ${fieldId} to option ${optionId}`);
            }

            const projectId = process.env.PROJECT_GITHUB_ID;

            const priorityLimitMap = {
              "P0": 3,
              "P1": 5,
              "P2": 7,
              "P3": 10,
            };

            function getIssueAgeInDays(createdAt) {
              const createdDate = new Date(createdAt);
              const now = new Date();
              const diffMs = now - createdDate;
              return Math.floor(diffMs / (1000 * 60 * 60 * 24));
            }

            async function getIssuesWithFields(projectId) {
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 50) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              title
                              number
                              state
                              createdAt
                            }
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const result = await github.graphql(query, { projectId });
              const items = result.node.items.nodes;
              return items.map(item => {
                const issue = item.content;
                if (!issue) return null;

                let priority = "N/A";
                let status = "N/A";

                for (const field of item.fieldValues.nodes) {
                  if (field?.field?.name === "Priority") priority = field.name;
                  else if (field?.field?.name === "Status") status = field.name;
                }

                return {
                  id: issue.id,
                  itemId: item.id,
                  number: issue.number,
                  title: issue.title,
                  state: issue.state,
                  createdAt: issue.createdAt,
                  priority,
                  status
                };
              }).filter(issue =>
                issue !== null && issue.status && issue.status.toLowerCase() === "todo"
              );
            }

            async function main() {
              if (!projectId) {
                console.log("❌ Missing PROJECT_GITHUB_ID environment variable.");
                return;
              }

              console.log("🔍 Fetching project fields...");
              const fields = await getProjectFields(projectId);

              const lateField = fields.find(f => f.name === LATE_FIELD_NAME);
              if (!lateField) {
                console.log(`❌ Field "${LATE_FIELD_NAME}" not found in project`);
                return;
              }
              if (!lateField.options) {
                console.log(`❌ Field "${LATE_FIELD_NAME}" does not have Single Select options`);
                return;
              }

              const yesOption = lateField.options.find(opt => opt.name === LATE_FIELD_VALUE_YES);
              if (!yesOption) {
                console.log(`❌ Option "${LATE_FIELD_VALUE_YES}" not found in "${LATE_FIELD_NAME}"`);
                return;
              }

              console.log("📋 Fetching project issues...");
              const issues = await getIssuesWithFields(projectId);

              for (const issue of issues) {
                console.log(`#${issue.number} - ${issue.title} (${issue.state})`);
                console.log(`   → Priority: ${issue.priority}, Status: ${issue.status}`);

                const priorityLimit = priorityLimitMap[issue.priority];
                if (!priorityLimit) {
                  console.log(`   ⚠ Unknown priority "${issue.priority}", skipping.`);
                  continue;
                }

                const ageInDays = getIssueAgeInDays(issue.createdAt);
                console.log(`   → Age: ${ageInDays} days (limit: ${priorityLimit})`);

                if (ageInDays > priorityLimit) {
                  console.log(`   🚨 Issue is late! Updating field...`);
                  await setLateFieldToYes(projectId, issue.itemId, lateField.id, yesOption.id);
                } else {
                  console.log(`   ✅ Issue is on time.`);
                }
              }
            }

            await main();
        env:
          PROJECT_GITHUB_ID: ${{ vars.PROJECT_GITHUB_ID }}

  get-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch pull requests and linked issues via GraphQL
        uses: actions/github-script@v7
        with:
          script: |
            async function fetchPullRequests(owner, repo) {
              const query = `
                query($owner: String!, $repo: String!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequests(first: 10, orderBy: {field: CREATED_AT, direction: DESC}) {
                      nodes {
                        number
                        title
                        createdAt
                        state
                        url
                        labels(first: 5) {
                          nodes {
                            name
                          }
                        }
                        timelineItems(itemTypes: [CONNECTED_EVENT], first: 5) {
                          nodes {
                            ... on ConnectedEvent {
                              id
                              source {
                                ... on Issue {
                                  number
                                  title
                                  url
                                  state
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const variables = { owner, repo };
              const result = await github.graphql(query, variables);
              return result.repository.pullRequests.nodes;
            }

            function printPullRequest(pr) {
              console.log(`#${pr.number} - ${pr.title} (created at ${pr.createdAt})`);
              if (pr.timelineItems.nodes.length > 0) {
                console.log("  Linked issues:");
                pr.timelineItems.nodes.forEach(linked => {
                  if (linked.source) {
                    console.log(`    #${linked.source.number} - ${linked.source.title} (${linked.source.state}) ${linked.source.url}`);
                  }
                });
              } else {
                console.log("  No linked issues found.");
              }
            }

            async function main() {
              const owner = "${{ github.repository_owner }}";
              const repo = "${{ github.event.repository.name }}";

              const pullRequests = await fetchPullRequests(owner, repo);

              console.log("Pull Requests with linked issues:");
              pullRequests.forEach(printPullRequest);
            }

            await main();
