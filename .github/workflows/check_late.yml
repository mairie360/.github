name: Check issues linked to project

on:
  workflow_dispatch:

jobs:
  check-project-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Query GitHub Project issues and Priority and Status fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GRAPH_QL_ACCESS_TOKEN }}
          script: |
            const projectId = "${{ vars.PROJECT_GITHUB_ID }}";
            const priorityLimitMap = {
              "P0": 3,
              "P1": 5,
              "P2": 7,
              "P3": 10,
            };

            async function getIssuesWithFields(projectId) {
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 20) {
                        nodes {
                          content {
                            ... on Issue {
                              id
                              title
                              number
                              state
                              createdAt
                            }
                          }
                          fieldValues(first: 10) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const result = await github.graphql(query, { projectId });
              const items = result.node.items.nodes;
              return items.map(item => {
                const issue = item.content;
                if (!issue) return null;

                let priority = "N/A";
                let status = "N/A";

                for (const field of item.fieldValues.nodes) {
                  if (field.field) {
                    if (field.field.name === "Priority") priority = field.name;
                    else if (field.field.name === "Status") status = field.name;
                  }
                }

                return {
                  id: issue.id,
                  number: issue.number,
                  title: issue.title,
                  state: issue.state,
                  createdAt: issue.createdAt,
                  priority,
                  status
                };
              }).filter(issue => issue !== null && issue.status.toLowerCase() === "todo");
            }

            function getIssueAgeInDays(createdAt) {
              const createdDate = new Date(createdAt);
              const now = new Date();
              const diffMs = now - createdDate; // diffÃ©rence en millisecondes

              const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
              return days;
            }

            // Utilisation de la fonction
            const issues = await getIssuesWithFields(projectId);

            console.log("Issues with Priority and Status:");
            for (const issue of issues) {
              console.log(`#${issue.number} - ${issue.title} [${issue.state}] - Created at: ${issue.createdAt}`);
              console.log(`   -> Priority: ${issue.priority}`);
              console.log(`   -> Status: ${issue.status}`);
              if (issue.priority !== "N/A" && issue.status !== "N/A") {
                const priorityLimit = priorityLimitMap[issue.priority];
                const ageInDays = getIssueAgeInDays(issue.createdAt);
                console.log(`   -> Age: ${ageInDays} days`);
              }
            }
